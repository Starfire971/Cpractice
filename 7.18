//数组
/*
int main()//1.数组的引用：逆序排列输出数组
{
    int a[10];
    int i,temp;
    for(i=0;i<10;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<=4;i++)
    {
        temp=a[i];
        a[i]=a[9-i];
        a[9-i]=temp;
    }
    for(i=0;i<10;i++)
    {
        printf("%d ",a[i]);
    }
    return 0;
}
*/

/*
int main()//2.一维数组的初始化：使用数组存放Fibonacci数列的前20项
{
    int fib[20]={1,1};
    int i;
    for(i=2;i<20;i++)
    {
        fib[i]=fib[i-2]+fib[i-1];
    }
    for(i=0;i<20;i++)
    {
        printf("%6d",fib[i]);
        if((i+1)%5==0)
            printf("\n");
    }
    return 0;
}
*/

/*
int main()//3.一维数组程序举例：从键盘输入10个整数，统计其最大值的出现次数
{
    int a[10];
    int i,max,count=0;
    printf("Input integer\n");
    for(i=0;i<10;i++)
    {
        scanf("%d",&a[i]);
    }
    max=a[0];
    for(i=1;i<10;i++)
    {
        if(a[i]>max)
            max=a[i];
    }
    for(i=0;i<10;i++)//i为0而不是1,当max=a[0]自己也要算一次
    {
        if(max==a[i])
            count++;
    }
    printf("%d,%d",max,count);
    return 0;
}
*/

/*
int main()//3.一维数组程序举例：冒泡排序使10个整数从小到大输出
{
    int a[10];
    int i,j,temp;
    printf("Input integer\n");
    for(i=0;i<10;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<9;i++)//比较n-1趟，不用跟自己比较
    {
        for(j=0;j<9-i;j++)//交换n-1趟，不用跟自己交换，不用跟交换过的数交换，所以n-i
    {
        if(a[j]>a[j+1])
        {
           temp=a[j];
           a[j]=a[j+1];
           a[j+1]=temp;
        }
    }
    }
    for(i=0;i<10;i++)
    {
        printf("%d ",a[i]);
    }
    return 0;
}
*/

/*
int main()//二维数组的引用：输入2行3列整形矩阵转置3行2列矩阵
{
    int a[2][3],b[3][2];
    int i,j;
    printf("Input matrix\n");
    for(i=0;i<2;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    for(i=0;i<2;i++)
    {
        for(j=0;j<3;j++)
        {
            b[j][i]=a[i][j];
        }
    }
    printf("Matrix b:\n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<2;j++)
        {
            printf("%4d",b[i][j]);
        }
        printf("\n");//要换行才能输出矩阵形状
    }
    return 0;
}
*/

/*
int main()//二维数组程序举例：给定一个3*4整形数组，找出最小元素值
{
    int a[3][4]={{-1,2,3,4},{5,2,10,8},{10,9,9,7}};
    int x,y,i,j,min;
    min=a[0][0];             //必须是a[x=0][y=0]而不能是a[0][0]，不然当第一个数最小时，if件不成立时，x,y是随机值
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(a[i][j]<min)
            {
                min=a[i][j];
                x=i;        //必须要有个变量能存下此刻特殊的i,j的值，不然i和j会一直++到循环结束从而输出随机值
                y=j;
            }
        }
    }
    printf("min=%d,x=%d,y=%d",min,x,y);
    return 0;
}
*/

/*
int main()//二维数组程序举例：输出10行的杨辉三角
{
    int yh[10][10];
    int i,j;
    for(i=0;i<10;i++)
    {
        for(j=0;j<=i;j++)                          //i<=j使得输出的样子为三角形形式
        {
            if(j==0||j==i)
            {
                yh[i][j]=1;
            }
            else
            {
                yh[i][j]=yh[i-1][j]+yh[i-1][j-1];  //杨辉三角的性质，第x行第y列的数等于第x-1行第y-1行的数+第x-1行第y行的数相加的和
            }
        }
    }
    for(i=0;i<10;i++)
    {
        for(j=0;j<=i;j++)
        {
            printf("%d ",yh[i][j]);
        }
        printf("\n");
    }
    return 0;
}
*/

/*
int main()//二维数组程序举例：计算两矩阵乘积
{
    int a[2][3]={{1,2,3},{4,5,6}};
    int b[3][4]={{1,2,3,4},{5,6,7,8},{9,5,4,3}};
    int c[2][4];
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<4;j++)
        {
            c[i][j]=0;
            for(k=0;k<3;k++)
                c[i][j]=c[i][j]+a[i][k]*b[k][j];   //计算矩阵的方法，多取一个k，在k循环中累加求和a与b的乘积，k是第一个矩阵的列数同时是第二个矩阵的行数
        }
    }
    printf("Matrix a:\n");
    for(i=0;i<2;i++)
    {
        for(j=0;j<3;j++)
        {
           printf("%d ",a[i][j]);
        }
        printf("\n");
    }

    printf("Matrix b:\n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<4;j++)
        {
           printf("%d ",b[i][j]);
        }
        printf("\n");
    }

    printf("Matrix c:\n");
    for(i=0;i<2;i++)
    {
        for(j=0;j<4;j++)
        {
           printf("%d ",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}
*/
